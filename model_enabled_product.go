/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.366.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// checks if the EnabledProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnabledProduct{}

// EnabledProduct Enabled Product represents a cloud access provider product
type EnabledProduct struct {
	EnabledQuantity *int32 `json:"enabledQuantity,omitempty"`
	ImageGroups []string `json:"imageGroups,omitempty"`
	Name *string `json:"name,omitempty"`
	// ShortDate represents the short date format used for API returns where time precision is not needed
	NextRenewal *string `json:"nextRenewal,omitempty"`
	Sku *string `json:"sku,omitempty"`
	TotalQuantity *int32 `json:"totalQuantity,omitempty"`
}

// NewEnabledProduct instantiates a new EnabledProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnabledProduct() *EnabledProduct {
	this := EnabledProduct{}
	return &this
}

// NewEnabledProductWithDefaults instantiates a new EnabledProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnabledProductWithDefaults() *EnabledProduct {
	this := EnabledProduct{}
	return &this
}

// GetEnabledQuantity returns the EnabledQuantity field value if set, zero value otherwise.
func (o *EnabledProduct) GetEnabledQuantity() int32 {
	if o == nil || IsNil(o.EnabledQuantity) {
		var ret int32
		return ret
	}
	return *o.EnabledQuantity
}

// GetEnabledQuantityOk returns a tuple with the EnabledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetEnabledQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.EnabledQuantity) {
		return nil, false
	}
	return o.EnabledQuantity, true
}

// HasEnabledQuantity returns a boolean if a field has been set.
func (o *EnabledProduct) HasEnabledQuantity() bool {
	if o != nil && !IsNil(o.EnabledQuantity) {
		return true
	}

	return false
}

// SetEnabledQuantity gets a reference to the given int32 and assigns it to the EnabledQuantity field.
func (o *EnabledProduct) SetEnabledQuantity(v int32) {
	o.EnabledQuantity = &v
}

// GetImageGroups returns the ImageGroups field value if set, zero value otherwise.
func (o *EnabledProduct) GetImageGroups() []string {
	if o == nil || IsNil(o.ImageGroups) {
		var ret []string
		return ret
	}
	return o.ImageGroups
}

// GetImageGroupsOk returns a tuple with the ImageGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetImageGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.ImageGroups) {
		return nil, false
	}
	return o.ImageGroups, true
}

// HasImageGroups returns a boolean if a field has been set.
func (o *EnabledProduct) HasImageGroups() bool {
	if o != nil && !IsNil(o.ImageGroups) {
		return true
	}

	return false
}

// SetImageGroups gets a reference to the given []string and assigns it to the ImageGroups field.
func (o *EnabledProduct) SetImageGroups(v []string) {
	o.ImageGroups = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnabledProduct) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnabledProduct) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnabledProduct) SetName(v string) {
	o.Name = &v
}

// GetNextRenewal returns the NextRenewal field value if set, zero value otherwise.
func (o *EnabledProduct) GetNextRenewal() string {
	if o == nil || IsNil(o.NextRenewal) {
		var ret string
		return ret
	}
	return *o.NextRenewal
}

// GetNextRenewalOk returns a tuple with the NextRenewal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetNextRenewalOk() (*string, bool) {
	if o == nil || IsNil(o.NextRenewal) {
		return nil, false
	}
	return o.NextRenewal, true
}

// HasNextRenewal returns a boolean if a field has been set.
func (o *EnabledProduct) HasNextRenewal() bool {
	if o != nil && !IsNil(o.NextRenewal) {
		return true
	}

	return false
}

// SetNextRenewal gets a reference to the given string and assigns it to the NextRenewal field.
func (o *EnabledProduct) SetNextRenewal(v string) {
	o.NextRenewal = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *EnabledProduct) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *EnabledProduct) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *EnabledProduct) SetSku(v string) {
	o.Sku = &v
}

// GetTotalQuantity returns the TotalQuantity field value if set, zero value otherwise.
func (o *EnabledProduct) GetTotalQuantity() int32 {
	if o == nil || IsNil(o.TotalQuantity) {
		var ret int32
		return ret
	}
	return *o.TotalQuantity
}

// GetTotalQuantityOk returns a tuple with the TotalQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledProduct) GetTotalQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalQuantity) {
		return nil, false
	}
	return o.TotalQuantity, true
}

// HasTotalQuantity returns a boolean if a field has been set.
func (o *EnabledProduct) HasTotalQuantity() bool {
	if o != nil && !IsNil(o.TotalQuantity) {
		return true
	}

	return false
}

// SetTotalQuantity gets a reference to the given int32 and assigns it to the TotalQuantity field.
func (o *EnabledProduct) SetTotalQuantity(v int32) {
	o.TotalQuantity = &v
}

func (o EnabledProduct) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnabledProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EnabledQuantity) {
		toSerialize["enabledQuantity"] = o.EnabledQuantity
	}
	if !IsNil(o.ImageGroups) {
		toSerialize["imageGroups"] = o.ImageGroups
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextRenewal) {
		toSerialize["nextRenewal"] = o.NextRenewal
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.TotalQuantity) {
		toSerialize["totalQuantity"] = o.TotalQuantity
	}
	return toSerialize, nil
}

type NullableEnabledProduct struct {
	value *EnabledProduct
	isSet bool
}

func (v NullableEnabledProduct) Get() *EnabledProduct {
	return v.value
}

func (v *NullableEnabledProduct) Set(val *EnabledProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledProduct(val *EnabledProduct) *NullableEnabledProduct {
	return &NullableEnabledProduct{value: val, isSet: true}
}

func (v NullableEnabledProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


