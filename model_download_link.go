/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.366.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// checks if the DownloadLink type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownloadLink{}

// DownloadLink struct for DownloadLink
type DownloadLink struct {
	// time at which the download link expires (in UTC)
	Expiration *string `json:"expiration,omitempty"`
	// filename of the file on the download link
	Filename *string `json:"filename,omitempty"`
	// URL to obtain the image
	Href *string `json:"href,omitempty"`
}

// NewDownloadLink instantiates a new DownloadLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadLink() *DownloadLink {
	this := DownloadLink{}
	return &this
}

// NewDownloadLinkWithDefaults instantiates a new DownloadLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadLinkWithDefaults() *DownloadLink {
	this := DownloadLink{}
	return &this
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *DownloadLink) GetExpiration() string {
	if o == nil || IsNil(o.Expiration) {
		var ret string
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadLink) GetExpirationOk() (*string, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *DownloadLink) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given string and assigns it to the Expiration field.
func (o *DownloadLink) SetExpiration(v string) {
	o.Expiration = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *DownloadLink) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadLink) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *DownloadLink) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *DownloadLink) SetFilename(v string) {
	o.Filename = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *DownloadLink) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadLink) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *DownloadLink) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *DownloadLink) SetHref(v string) {
	o.Href = &v
}

func (o DownloadLink) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownloadLink) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}
	return toSerialize, nil
}

type NullableDownloadLink struct {
	value *DownloadLink
	isSet bool
}

func (v NullableDownloadLink) Get() *DownloadLink {
	return v.value
}

func (v *NullableDownloadLink) Set(val *DownloadLink) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadLink) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadLink(val *DownloadLink) *NullableDownloadLink {
	return &NullableDownloadLink{value: val, isSet: true}
}

func (v NullableDownloadLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


