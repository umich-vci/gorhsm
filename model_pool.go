/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.300.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// Pool Pool represents pool information that matter for the detail list
type Pool struct {
	Consumed *int32  `json:"consumed,omitempty"`
	Id       *string `json:"id,omitempty"`
	Quantity *int32  `json:"quantity,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// NewPool instantiates a new Pool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPool() *Pool {
	this := Pool{}
	return &this
}

// NewPoolWithDefaults instantiates a new Pool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolWithDefaults() *Pool {
	this := Pool{}
	return &this
}

// GetConsumed returns the Consumed field value if set, zero value otherwise.
func (o *Pool) GetConsumed() int32 {
	if o == nil || o.Consumed == nil {
		var ret int32
		return ret
	}
	return *o.Consumed
}

// GetConsumedOk returns a tuple with the Consumed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pool) GetConsumedOk() (*int32, bool) {
	if o == nil || o.Consumed == nil {
		return nil, false
	}
	return o.Consumed, true
}

// HasConsumed returns a boolean if a field has been set.
func (o *Pool) HasConsumed() bool {
	if o != nil && o.Consumed != nil {
		return true
	}

	return false
}

// SetConsumed gets a reference to the given int32 and assigns it to the Consumed field.
func (o *Pool) SetConsumed(v int32) {
	o.Consumed = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Pool) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pool) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Pool) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Pool) SetId(v string) {
	o.Id = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Pool) GetQuantity() int32 {
	if o == nil || o.Quantity == nil {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pool) GetQuantityOk() (*int32, bool) {
	if o == nil || o.Quantity == nil {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Pool) HasQuantity() bool {
	if o != nil && o.Quantity != nil {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *Pool) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Pool) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Pool) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Pool) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Pool) SetType(v string) {
	o.Type = &v
}

func (o Pool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Consumed != nil {
		toSerialize["consumed"] = o.Consumed
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Quantity != nil {
		toSerialize["quantity"] = o.Quantity
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullablePool struct {
	value *Pool
	isSet bool
}

func (v NullablePool) Get() *Pool {
	return v.value
}

func (v *NullablePool) Set(val *Pool) {
	v.value = val
	v.isSet = true
}

func (v NullablePool) IsSet() bool {
	return v.isSet
}

func (v *NullablePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePool(val *Pool) *NullablePool {
	return &NullablePool{value: val, isSet: true}
}

func (v NullablePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
