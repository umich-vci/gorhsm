/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.313.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// checks if the EnabledCloudAccessProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnabledCloudAccessProvider{}

// EnabledCloudAccessProvider Enabled Cloud Access Provider details including products and accounts.
type EnabledCloudAccessProvider struct {
	Accounts []EnabledProviderAccount `json:"accounts,omitempty"`
	Name *string `json:"name,omitempty"`
	Products []EnabledProduct `json:"products,omitempty"`
	ShortName *string `json:"shortName,omitempty"`
}

// NewEnabledCloudAccessProvider instantiates a new EnabledCloudAccessProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnabledCloudAccessProvider() *EnabledCloudAccessProvider {
	this := EnabledCloudAccessProvider{}
	return &this
}

// NewEnabledCloudAccessProviderWithDefaults instantiates a new EnabledCloudAccessProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnabledCloudAccessProviderWithDefaults() *EnabledCloudAccessProvider {
	this := EnabledCloudAccessProvider{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *EnabledCloudAccessProvider) GetAccounts() []EnabledProviderAccount {
	if o == nil || IsNil(o.Accounts) {
		var ret []EnabledProviderAccount
		return ret
	}
	return o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCloudAccessProvider) GetAccountsOk() ([]EnabledProviderAccount, bool) {
	if o == nil || IsNil(o.Accounts) {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *EnabledCloudAccessProvider) HasAccounts() bool {
	if o != nil && !IsNil(o.Accounts) {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []EnabledProviderAccount and assigns it to the Accounts field.
func (o *EnabledCloudAccessProvider) SetAccounts(v []EnabledProviderAccount) {
	o.Accounts = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnabledCloudAccessProvider) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCloudAccessProvider) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnabledCloudAccessProvider) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnabledCloudAccessProvider) SetName(v string) {
	o.Name = &v
}

// GetProducts returns the Products field value if set, zero value otherwise.
func (o *EnabledCloudAccessProvider) GetProducts() []EnabledProduct {
	if o == nil || IsNil(o.Products) {
		var ret []EnabledProduct
		return ret
	}
	return o.Products
}

// GetProductsOk returns a tuple with the Products field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCloudAccessProvider) GetProductsOk() ([]EnabledProduct, bool) {
	if o == nil || IsNil(o.Products) {
		return nil, false
	}
	return o.Products, true
}

// HasProducts returns a boolean if a field has been set.
func (o *EnabledCloudAccessProvider) HasProducts() bool {
	if o != nil && !IsNil(o.Products) {
		return true
	}

	return false
}

// SetProducts gets a reference to the given []EnabledProduct and assigns it to the Products field.
func (o *EnabledCloudAccessProvider) SetProducts(v []EnabledProduct) {
	o.Products = v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *EnabledCloudAccessProvider) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnabledCloudAccessProvider) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *EnabledCloudAccessProvider) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *EnabledCloudAccessProvider) SetShortName(v string) {
	o.ShortName = &v
}

func (o EnabledCloudAccessProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnabledCloudAccessProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accounts) {
		toSerialize["accounts"] = o.Accounts
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Products) {
		toSerialize["products"] = o.Products
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	return toSerialize, nil
}

type NullableEnabledCloudAccessProvider struct {
	value *EnabledCloudAccessProvider
	isSet bool
}

func (v NullableEnabledCloudAccessProvider) Get() *EnabledCloudAccessProvider {
	return v.value
}

func (v *NullableEnabledCloudAccessProvider) Set(val *EnabledCloudAccessProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableEnabledCloudAccessProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableEnabledCloudAccessProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnabledCloudAccessProvider(val *EnabledCloudAccessProvider) *NullableEnabledCloudAccessProvider {
	return &NullableEnabledCloudAccessProvider{value: val, isSet: true}
}

func (v NullableEnabledCloudAccessProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnabledCloudAccessProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


