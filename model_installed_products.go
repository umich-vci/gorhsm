/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.196.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// InstalledProducts details of installed products on the system
type InstalledProducts struct {
	Arch        *string `json:"arch,omitempty"`
	ProductID   *string `json:"productID,omitempty"`
	ProductName *string `json:"productName,omitempty"`
	Status      *string `json:"status,omitempty"`
	Version     *string `json:"version,omitempty"`
}

// NewInstalledProducts instantiates a new InstalledProducts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstalledProducts() *InstalledProducts {
	this := InstalledProducts{}
	return &this
}

// NewInstalledProductsWithDefaults instantiates a new InstalledProducts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstalledProductsWithDefaults() *InstalledProducts {
	this := InstalledProducts{}
	return &this
}

// GetArch returns the Arch field value if set, zero value otherwise.
func (o *InstalledProducts) GetArch() string {
	if o == nil || o.Arch == nil {
		var ret string
		return ret
	}
	return *o.Arch
}

// GetArchOk returns a tuple with the Arch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstalledProducts) GetArchOk() (*string, bool) {
	if o == nil || o.Arch == nil {
		return nil, false
	}
	return o.Arch, true
}

// HasArch returns a boolean if a field has been set.
func (o *InstalledProducts) HasArch() bool {
	if o != nil && o.Arch != nil {
		return true
	}

	return false
}

// SetArch gets a reference to the given string and assigns it to the Arch field.
func (o *InstalledProducts) SetArch(v string) {
	o.Arch = &v
}

// GetProductID returns the ProductID field value if set, zero value otherwise.
func (o *InstalledProducts) GetProductID() string {
	if o == nil || o.ProductID == nil {
		var ret string
		return ret
	}
	return *o.ProductID
}

// GetProductIDOk returns a tuple with the ProductID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstalledProducts) GetProductIDOk() (*string, bool) {
	if o == nil || o.ProductID == nil {
		return nil, false
	}
	return o.ProductID, true
}

// HasProductID returns a boolean if a field has been set.
func (o *InstalledProducts) HasProductID() bool {
	if o != nil && o.ProductID != nil {
		return true
	}

	return false
}

// SetProductID gets a reference to the given string and assigns it to the ProductID field.
func (o *InstalledProducts) SetProductID(v string) {
	o.ProductID = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *InstalledProducts) GetProductName() string {
	if o == nil || o.ProductName == nil {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstalledProducts) GetProductNameOk() (*string, bool) {
	if o == nil || o.ProductName == nil {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *InstalledProducts) HasProductName() bool {
	if o != nil && o.ProductName != nil {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *InstalledProducts) SetProductName(v string) {
	o.ProductName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *InstalledProducts) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstalledProducts) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *InstalledProducts) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *InstalledProducts) SetStatus(v string) {
	o.Status = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InstalledProducts) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InstalledProducts) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InstalledProducts) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InstalledProducts) SetVersion(v string) {
	o.Version = &v
}

func (o InstalledProducts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arch != nil {
		toSerialize["arch"] = o.Arch
	}
	if o.ProductID != nil {
		toSerialize["productID"] = o.ProductID
	}
	if o.ProductName != nil {
		toSerialize["productName"] = o.ProductName
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableInstalledProducts struct {
	value *InstalledProducts
	isSet bool
}

func (v NullableInstalledProducts) Get() *InstalledProducts {
	return v.value
}

func (v *NullableInstalledProducts) Set(val *InstalledProducts) {
	v.value = val
	v.isSet = true
}

func (v NullableInstalledProducts) IsSet() bool {
	return v.isSet
}

func (v *NullableInstalledProducts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstalledProducts(val *InstalledProducts) *NullableInstalledProducts {
	return &NullableInstalledProducts{value: val, isSet: true}
}

func (v NullableInstalledProducts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstalledProducts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
