/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.313.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// checks if the ErrataCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrataCount{}

// ErrataCount ErrataCount is the errata information for a System
type ErrataCount struct {
	BugfixCount *int32 `json:"bugfixCount,omitempty"`
	EnhancementCount *int32 `json:"enhancementCount,omitempty"`
	SecurityCount *int32 `json:"securityCount,omitempty"`
}

// NewErrataCount instantiates a new ErrataCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrataCount() *ErrataCount {
	this := ErrataCount{}
	return &this
}

// NewErrataCountWithDefaults instantiates a new ErrataCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrataCountWithDefaults() *ErrataCount {
	this := ErrataCount{}
	return &this
}

// GetBugfixCount returns the BugfixCount field value if set, zero value otherwise.
func (o *ErrataCount) GetBugfixCount() int32 {
	if o == nil || IsNil(o.BugfixCount) {
		var ret int32
		return ret
	}
	return *o.BugfixCount
}

// GetBugfixCountOk returns a tuple with the BugfixCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrataCount) GetBugfixCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BugfixCount) {
		return nil, false
	}
	return o.BugfixCount, true
}

// HasBugfixCount returns a boolean if a field has been set.
func (o *ErrataCount) HasBugfixCount() bool {
	if o != nil && !IsNil(o.BugfixCount) {
		return true
	}

	return false
}

// SetBugfixCount gets a reference to the given int32 and assigns it to the BugfixCount field.
func (o *ErrataCount) SetBugfixCount(v int32) {
	o.BugfixCount = &v
}

// GetEnhancementCount returns the EnhancementCount field value if set, zero value otherwise.
func (o *ErrataCount) GetEnhancementCount() int32 {
	if o == nil || IsNil(o.EnhancementCount) {
		var ret int32
		return ret
	}
	return *o.EnhancementCount
}

// GetEnhancementCountOk returns a tuple with the EnhancementCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrataCount) GetEnhancementCountOk() (*int32, bool) {
	if o == nil || IsNil(o.EnhancementCount) {
		return nil, false
	}
	return o.EnhancementCount, true
}

// HasEnhancementCount returns a boolean if a field has been set.
func (o *ErrataCount) HasEnhancementCount() bool {
	if o != nil && !IsNil(o.EnhancementCount) {
		return true
	}

	return false
}

// SetEnhancementCount gets a reference to the given int32 and assigns it to the EnhancementCount field.
func (o *ErrataCount) SetEnhancementCount(v int32) {
	o.EnhancementCount = &v
}

// GetSecurityCount returns the SecurityCount field value if set, zero value otherwise.
func (o *ErrataCount) GetSecurityCount() int32 {
	if o == nil || IsNil(o.SecurityCount) {
		var ret int32
		return ret
	}
	return *o.SecurityCount
}

// GetSecurityCountOk returns a tuple with the SecurityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrataCount) GetSecurityCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SecurityCount) {
		return nil, false
	}
	return o.SecurityCount, true
}

// HasSecurityCount returns a boolean if a field has been set.
func (o *ErrataCount) HasSecurityCount() bool {
	if o != nil && !IsNil(o.SecurityCount) {
		return true
	}

	return false
}

// SetSecurityCount gets a reference to the given int32 and assigns it to the SecurityCount field.
func (o *ErrataCount) SetSecurityCount(v int32) {
	o.SecurityCount = &v
}

func (o ErrataCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrataCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BugfixCount) {
		toSerialize["bugfixCount"] = o.BugfixCount
	}
	if !IsNil(o.EnhancementCount) {
		toSerialize["enhancementCount"] = o.EnhancementCount
	}
	if !IsNil(o.SecurityCount) {
		toSerialize["securityCount"] = o.SecurityCount
	}
	return toSerialize, nil
}

type NullableErrataCount struct {
	value *ErrataCount
	isSet bool
}

func (v NullableErrataCount) Get() *ErrataCount {
	return v.value
}

func (v *NullableErrataCount) Set(val *ErrataCount) {
	v.value = val
	v.isSet = true
}

func (v NullableErrataCount) IsSet() bool {
	return v.isSet
}

func (v *NullableErrataCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrataCount(val *ErrataCount) *NullableErrataCount {
	return &NullableErrataCount{value: val, isSet: true}
}

func (v NullableErrataCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrataCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


