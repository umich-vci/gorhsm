/*
RHSM-API

Testing SystemApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gorhsm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/umich-vci/gorhsm"
)

func Test_gorhsm_SystemApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SystemApiService AttachEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemApi.AttachEntitlement(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService ListSystemErrata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemApi.ListSystemErrata(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService ListSystemPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemApi.ListSystemPackages(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService ListSystemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemApi.ListSystemPools(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService ListSystems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SystemApi.ListSystems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService RemoveSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		httpRes, err := apiClient.SystemApi.RemoveSystem(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService RemoveSystemEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string
		var entitlementID string

		httpRes, err := apiClient.SystemApi.RemoveSystemEntitlement(context.Background(), systemUUID, entitlementID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemApiService ShowSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemApi.ShowSystem(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
