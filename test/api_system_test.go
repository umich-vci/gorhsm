/*
RHSM-API

Testing SystemAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gorhsm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/umich-vci/gorhsm"
)

func Test_gorhsm_SystemAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SystemAPIService AttachEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemAPI.AttachEntitlement(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService ListSystemErrata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemAPI.ListSystemErrata(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService ListSystemPackages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemAPI.ListSystemPackages(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService ListSystemPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemAPI.ListSystemPools(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService ListSystems", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SystemAPI.ListSystems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService RemoveSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		httpRes, err := apiClient.SystemAPI.RemoveSystem(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService RemoveSystemEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string
		var entitlementID string

		httpRes, err := apiClient.SystemAPI.RemoveSystemEntitlement(context.Background(), systemUUID, entitlementID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SystemAPIService ShowSystem", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var systemUUID string

		resp, httpRes, err := apiClient.SystemAPI.ShowSystem(context.Background(), systemUUID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
