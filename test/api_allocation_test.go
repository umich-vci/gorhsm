/*
RHSM-API

Testing AllocationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package gorhsm

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/umich-vci/gorhsm"
)

func Test_gorhsm_AllocationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AllocationApiService AttachEntitlementAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.AllocationApi.AttachEntitlementAllocation(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService CreateSatellite", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllocationApi.CreateSatellite(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ExportAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.AllocationApi.ExportAllocation(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ExportJobAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string
		var exportJobID string

		resp, httpRes, err := apiClient.AllocationApi.ExportJobAllocation(context.Background(), uuid, exportJobID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService GetExportAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string
		var exportID string

		resp, httpRes, err := apiClient.AllocationApi.GetExportAllocation(context.Background(), uuid, exportID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ListAllocationPools", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.AllocationApi.ListAllocationPools(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ListAllocations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllocationApi.ListAllocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ListVersionsAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AllocationApi.ListVersionsAllocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService RemoveAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		httpRes, err := apiClient.AllocationApi.RemoveAllocation(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService RemoveAllocationEntitlement", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string
		var entitlementID string

		httpRes, err := apiClient.AllocationApi.RemoveAllocationEntitlement(context.Background(), uuid, entitlementID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService RemoveAllocationEntitlementDeprecated", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string
		var entitlementID string

		httpRes, err := apiClient.AllocationApi.RemoveAllocationEntitlementDeprecated(context.Background(), uuid, entitlementID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService ShowAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		resp, httpRes, err := apiClient.AllocationApi.ShowAllocation(context.Background(), uuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService UpdateAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string

		httpRes, err := apiClient.AllocationApi.UpdateAllocation(context.Background(), uuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AllocationApiService UpdateEntitlementAllocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var uuid string
		var entitlementID string

		resp, httpRes, err := apiClient.AllocationApi.UpdateEntitlementAllocation(context.Background(), uuid, entitlementID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
