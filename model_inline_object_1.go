/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.264.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
)

// InlineObject1 struct for InlineObject1
type InlineObject1 struct {
	Id          string  `json:"id"`
	NewNickname *string `json:"newNickname,omitempty"`
}

// NewInlineObject1 instantiates a new InlineObject1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1(id string) *InlineObject1 {
	this := InlineObject1{}
	this.Id = id
	return &this
}

// NewInlineObject1WithDefaults instantiates a new InlineObject1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1WithDefaults() *InlineObject1 {
	this := InlineObject1{}
	return &this
}

// GetId returns the Id field value
func (o *InlineObject1) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InlineObject1) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InlineObject1) SetId(v string) {
	o.Id = v
}

// GetNewNickname returns the NewNickname field value if set, zero value otherwise.
func (o *InlineObject1) GetNewNickname() string {
	if o == nil || o.NewNickname == nil {
		var ret string
		return ret
	}
	return *o.NewNickname
}

// GetNewNicknameOk returns a tuple with the NewNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject1) GetNewNicknameOk() (*string, bool) {
	if o == nil || o.NewNickname == nil {
		return nil, false
	}
	return o.NewNickname, true
}

// HasNewNickname returns a boolean if a field has been set.
func (o *InlineObject1) HasNewNickname() bool {
	if o != nil && o.NewNickname != nil {
		return true
	}

	return false
}

// SetNewNickname gets a reference to the given string and assigns it to the NewNickname field.
func (o *InlineObject1) SetNewNickname(v string) {
	o.NewNickname = &v
}

func (o InlineObject1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.NewNickname != nil {
		toSerialize["newNickname"] = o.NewNickname
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1 struct {
	value *InlineObject1
	isSet bool
}

func (v NullableInlineObject1) Get() *InlineObject1 {
	return v.value
}

func (v *NullableInlineObject1) Set(val *InlineObject1) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1(val *InlineObject1) *NullableInlineObject1 {
	return &NullableInlineObject1{value: val, isSet: true}
}

func (v NullableInlineObject1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
