/*
RHSM-API

API for Red Hat Subscription Management

API version: 1.366.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gorhsm

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateAllocationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateAllocationRequest{}

// UpdateAllocationRequest struct for UpdateAllocationRequest
type UpdateAllocationRequest struct {
	SimpleContentAccess string `json:"simpleContentAccess"`
}

type _UpdateAllocationRequest UpdateAllocationRequest

// NewUpdateAllocationRequest instantiates a new UpdateAllocationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateAllocationRequest(simpleContentAccess string) *UpdateAllocationRequest {
	this := UpdateAllocationRequest{}
	this.SimpleContentAccess = simpleContentAccess
	return &this
}

// NewUpdateAllocationRequestWithDefaults instantiates a new UpdateAllocationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateAllocationRequestWithDefaults() *UpdateAllocationRequest {
	this := UpdateAllocationRequest{}
	return &this
}

// GetSimpleContentAccess returns the SimpleContentAccess field value
func (o *UpdateAllocationRequest) GetSimpleContentAccess() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SimpleContentAccess
}

// GetSimpleContentAccessOk returns a tuple with the SimpleContentAccess field value
// and a boolean to check if the value has been set.
func (o *UpdateAllocationRequest) GetSimpleContentAccessOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SimpleContentAccess, true
}

// SetSimpleContentAccess sets field value
func (o *UpdateAllocationRequest) SetSimpleContentAccess(v string) {
	o.SimpleContentAccess = v
}

func (o UpdateAllocationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateAllocationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["simpleContentAccess"] = o.SimpleContentAccess
	return toSerialize, nil
}

func (o *UpdateAllocationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"simpleContentAccess",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateAllocationRequest := _UpdateAllocationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateAllocationRequest)

	if err != nil {
		return err
	}

	*o = UpdateAllocationRequest(varUpdateAllocationRequest)

	return err
}

type NullableUpdateAllocationRequest struct {
	value *UpdateAllocationRequest
	isSet bool
}

func (v NullableUpdateAllocationRequest) Get() *UpdateAllocationRequest {
	return v.value
}

func (v *NullableUpdateAllocationRequest) Set(val *UpdateAllocationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateAllocationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateAllocationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateAllocationRequest(val *UpdateAllocationRequest) *NullableUpdateAllocationRequest {
	return &NullableUpdateAllocationRequest{value: val, isSet: true}
}

func (v NullableUpdateAllocationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateAllocationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


